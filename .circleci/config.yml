version: 2.1
orbs:
  slack: circleci/slack@4.1.1
commands:
  rollback_infra_stacks:
    steps:
      - run:
          name: Rollback Infra
          command: |
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
          when: on_fail
  aws_dependencies:
    steps:
      - run:
          name: Install dependencies for AWS Linux 2
          command: |
            yum -y install jq tar less gzip
  fail_switch:
    steps:
      - run:
          name: Deployment failure switch
          command: |
            exit 1

  slack-fail-notify:
    description: Alert the slack channel on deployment failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-pass-notify:
    description: Alert the slack channel on deployment success
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-fail-notify
      - slack-pass-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-fail-notify
      - slack-pass-notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm test
      - slack-fail-notify
      - slack-pass-notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm test
      - slack-fail-notify
      - slack-pass-notify
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
      - slack-fail-notify
      - slack-pass-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - slack-fail-notify
      - slack-pass-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws_dependencies
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "your front-end stack name with workflow id" \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls
            touch .circleci/ansible/inventory.txt
            >.circleci/ansible/inventory.txt
            echo [ec2] >> .circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=!Sub backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#      - rollback_infra_stacks 
      - slack-fail-notify
      - slack-pass-notify

#  configure-infrastructure:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Configure server
#          command: |
#            # Your code here
#            exit 1
#      # Here's where you will add some code to rollback on failure      
#
#  run-migrations:
#    docker:
#      # Docker image here that supports NodeJS
#    steps:
#      # Checkout code from git
#      - run:
#          name: Run migrations
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Send migration results to memstash
#          command: |
#            # Your code here
#            exit 1
#     # Here's where you will add some code to rollback on failure      
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure      
#                    
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image 
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#            
#
workflows:
  version: 2
  default:
    jobs:
      - build-frontend:
          context:
            - aws
            - slack
      - build-backend:
          context:
            - aws
            - slack
      - test-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - test-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - deploy-infrastructure:
          context:
            - aws
            - slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #    filters:
          #  branches:
          #    only: [test-feature-branch]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]
