version: 2.1
orbs:
  slack: circleci/slack@4.1.1
commands:
  rollback_infra_stacks:
    steps:
      - run:
          name: Rollback Infra
          command: |
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
          when: on_fail
  aws_dependencies:
    steps:
      - run:
          name: Install dependencies for AWS Linux 2
          command: |
            yum -y install jq tar less gzip
  fail_switch:
    steps:
      - run:
          name: Deployment failure switch
          command: |
            exit 1

  slack-fail-notify:
    description: Alert the slack channel on deployment failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-pass-notify:
    description: Alert the slack channel on deployment success
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-build
      - slack-fail-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend]
          key: v2-backend-build
      - slack-fail-notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm test
      - slack-fail-notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm test
      - slack-fail-notify
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
      - slack-fail-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - slack-fail-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws_dependencies
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls
            touch .circleci/ansible/inventory
            >.circleci/ansible/inventory
            echo [ec2] >> .circleci/ansible/inventory
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text >> .circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory
      - rollback_infra_stacks 
      - slack-fail-notify
      - slack-pass-notify

  configure-infrastructure:
    docker:
      - image: cimg/python:3.9.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - add_ssh_keys:
          fingerprints: ["b4:f5:d1:d2:18:51:66:f6:39:d4:09:da:af:00:2e:82"]
      - run:
          name: "Ansible control server install and playbook run"
          command: |
            cd /home/circleci/
            #            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            #sudo unzip awscliv2.zip
            #sudo bash ./aws/install
            cd /home/circleci/project/.circleci/ansible
            python -m pip install --user ansible
            ansible-playbook configure_server.yml
            #  - persist_to_workspace:
            #root: /home/circleci
            #paths:
            #- project
      - rollback_infra_stacks
      - slack-fail-notify

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
          #- attach_workspace:
          #at: ./backend
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            touch dbmigration
            npm i
            npm run build
            npm run migrations >> dbmigration
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep -q "has been executed successfully" dbmigrations
            then
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
            #- save_cache:
            #paths: [backend/node_modules]
            #key: v2-backend-build
              
      - rollback_infra_stacks
      - slack-fail-notify
            
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
#      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Install awscli
          command: |
            sudo apt install python3-pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            pwd
            touch ec2ipaddy
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL
            echo $BACKEND_IP
      - run:
          name: Deploy frontend objects
          command: |
            pwd
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      
      - rollback_infra_stacks
      - slack-fail-notify

  deploy-backend:
    docker:
      - image: cimg/python:3.9.0
    steps:
      - checkout
      - restore_cache:
          keys: [v2-backend-build]
      - add_ssh_keys:
          fingerprints: ["b4:f5:d1:d2:18:51:66:f6:39:d4:09:da:af:00:2e:82"]
      - attach_workspace:
          at: ~/project/.circleci/ansible
      - run:
          name: Deploy backend
          command: |
            cd /home/circleci/project/backend
            touch .env
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./dist/migrations >> ".env"
            echo TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity\{.ts,.js\} >> ".env"
            echo TYPEORM_MIGRATIONS=./dist/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cd /home/circleci/project
            tar cvfz backend.tgz backend
            mv backend.tgz /home/circleci/project/.circleci/ansible/roles/deploy/files/
            cd /home/circleci/project/.circleci/ansible
            python -m pip install --user ansible
            ansible-playbook deploy_backend.yml
      # Here's where you will add some code to rollback on failure  
      #- rollback_infra_stacks
      - slack-fail-notify
      - slack-pass-notify

  backend-smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws_dependencies
      - checkout
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL=http://$BACKEND_IP:3030/api/status
            echo $API_URL
            echo $BACKEND_IP
            #Backend smoke test
            if curl -s "$API_URL" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
  frontend-smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws_dependencies
      - checkout
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            echo $FRONTEND_URL
            if curl -s "$FRONTEND_URL" | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  

#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#            
#
workflows:
  version: 2
  default:
    jobs:
      - build-frontend:
          context:
            - aws
            - slack
      - build-backend:
          context:
            - aws
            - slack
      - test-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - test-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - deploy-infrastructure:
          context:
            - aws
            - slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context:
            - slack
      - run-migrations:
          requires: [configure-infrastructure]
          context:
            - aws
            - slack
      - deploy-frontend:
          requires: [run-migrations]
          context:
            - aws
            - slack
      - deploy-backend:
          requires: [deploy-frontend]
          context:
            - aws
            - slack
      - backend-smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context:
            - aws
            - slack
      - frontend-smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context:
            - aws
            - slack
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      ##    requires: [cloudfront-update]
