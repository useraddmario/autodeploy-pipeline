version: 2.1
orbs:
  slack: circleci/slack@4.1.1
commands:
  fail-switch:
    steps:
      - run:
          name: Troubleshooting dev failure switch
          command: |
            exit 1
  
  aws-dependencies:
    steps:
      - run:
          name: Install dependencies for AWS Linux 2
          command: |
            yum -y install jq tar less gzip util-linux

  slack-fail-notify:
    description: Alert the slack channel on deployment failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-pass-notify:
    description: Alert the slack channel on deployment success
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          command: |
            migration_check=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/<< pipeline.id >>_migrations)
            if(( $migration_check==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
  
  destroy-environment:
    description: J. Robert Oppenheimer
    steps:
      - run: 
          name: Remove S3 artifacts for failed deployment
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation wait stack-delete-complete --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" 
          when: on_fail
  
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - slack-fail-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd /home/circleci/project/backend
            npm install
            npm run build
      - run:
          name: Save backend build
          command: |
            mkdir /tmp/backend
            cd /home/circleci/project/backend
            cp -a package.json /tmp/backend
            cd dist
            cp -Ra ./* /tmp/backend
            cd /tmp
            tar cvfz /tmp/backend.tgz backend
      - persist_to_workspace:
          root: /tmp
          paths: 
            - backend.tgz
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-${CIRCLE_WORKFLOW_ID:0:7}
      - slack-fail-notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test
      - slack-fail-notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-${CIRCLE_WORKFLOW_ID:0"7}
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
      - slack-fail-notify
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force > audit-output-too-long
      - store_artifacts:
          path: /home/circleci/project/frontend/audit-output-too-long
      - slack-fail-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - slack-fail-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-dependencies
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend workflowid="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend workflowid="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls
            touch .circleci/ansible/inventory
            >.circleci/ansible/inventory
            echo [ec2] >> .circleci/ansible/inventory
            
            aws cloudformation list-exports \
              --query "Exports[?Name=='EC2PublicIP${CIRCLE_WORKFLOW_ID:0:7}'].Value[]" \
              --output text >> .circleci/ansible/inventory

            cat .circleci/ansible/inventory

      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory
      - destroy-environment 
      - slack-fail-notify

  configure-infrastructure:
    docker:
      - image: cimg/python:3.9.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/backend
      - add_ssh_keys:
          fingerprints: ["b4:f5:d1:d2:18:51:66:f6:39:d4:09:da:af:00:2e:82"]
      - run:
          name: "Ansible control server install and playbook run"
          command: |
            cp -a /tmp/backend/inventory /home/circleci/project/.circleci/ansible/
            cd /home/circleci/project/.circleci/ansible
            python -m pip install --user ansible
            ansible-playbook configure_server.yml
      - destroy-environment
      - slack-fail-notify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Run migrations
          command: |
            cd backend
            touch dbmigration
            npm i
            npm run migrations >> dbmigration
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" dbmigrations
            then
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "true" https://api.memstash.io/values/<< pipeline.id >>_migrations
            else
                curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "false" https://api.memstash.io/values/<< pipeline.id >>_migrations
            fi
      - revert-migrations        
      - destroy-environment
      - slack-fail-notify
            
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            sudo apt install python3-pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            pwd
            touch ec2ipaddy
            export BACKEND_IP=$(aws cloudformation list-exports \
              --query "Exports[?Name=='EC2PublicIP${CIRCLE_WORKFLOW_ID:0:7}'].Value[]" \
              --output text)
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migrations        
      - destroy-environment
      - slack-fail-notify

  deploy-backend:
    docker:
      - image: cimg/python:3.9.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b4:f5:d1:d2:18:51:66:f6:39:d4:09:da:af:00:2e:82"]
      - attach_workspace:
          at: /tmp/backend
      - run:
          name: Deploy backend
          command: |
            cp -a /tmp/backend/inventory /home/circleci/project/.circleci/ansible/
            cd /home/circleci/project/.circleci/ansible/roles/deploy/files/
            touch .env
            echo ENVIRONMENT=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./migrations >> ".env"
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity\{.ts,.js\} >> ".env"
            echo TYPEORM_MIGRATIONS=./migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            cp /tmp/backend/backend.tgz .
            cd /home/circleci/project/.circleci/ansible
            python -m pip install --user ansible
            ansible-playbook deploy_backend.yml
      - revert-migrations        
      - destroy-environment
      - slack-fail-notify

  backend-smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-dependencies
      - checkout
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
              --query "Exports[?Name=='EC2PublicIP${CIRCLE_WORKFLOW_ID:0:7}'].Value[]" \
              --output text)
            export API_URL=http://$BACKEND_IP:3030/api/status
            echo $API_URL
            echo $BACKEND_IP
            if curl -s "$API_URL" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations        
        #- destroy-environment
        #- slack-fail-notify
        #- slack-pass-notify
  frontend-smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-dependencies
      - checkout
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            echo $FRONTEND_URL
            if curl -s "$FRONTEND_URL" | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations        
      - destroy-environment
      - slack-fail-notify
      - slack-pass-notify

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-dependencies
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            Stacks=false

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudfront create-invalidation \
              --distribution-id E1QV8ZMRIERELT \
              --paths "/*"

            for each in $(aws cloudformation list-stacks \
              --query 'StackSummaries[*].StackName' \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text)
            do
              if [[ $each == "backend-$OldWorkflowID" ]]
              then
                echo $each
                Stacks=true
              fi  
            done

            echo $OldWorkflowID
            echo $Stacks

            if $Stacks
            then
              aws s3 rb s3://udapeople-$OldWorkflowID --force
              aws cloudformation delete-stack --stack-name "frontend-$OldWorkflowID"
              aws cloudformation wait stack-delete-complete --stack-name "frontend-$OldWorkflowID"
              aws cloudformation delete-stack --stack-name "backend-$OldWorkflowID"
              aws cloudformation wait stack-delete-complete --stack-name "backend-$OldWorkflowID"
            fi
      - destroy-environment
      - slack-fail-notify
      - slack-pass-notify

workflows:
  version: 2
  default:
    jobs:
      - build-frontend:
          context:
            - aws
            - slack
      - build-backend:
          context:
            - aws
            - slack
      - test-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - test-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-backend:
          context:
            - aws
            - slack
          requires:
            - build-backend
      - scan-frontend:
          context:
            - aws
            - slack
          requires:
            - build-frontend
      - deploy-infrastructure:
          context:
            - aws
            - slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master, ec2parse]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context:
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - run-migrations:
          requires: [configure-infrastructure]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - deploy-frontend:
          requires: [run-migrations]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - deploy-backend:
          requires: [deploy-frontend]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - backend-smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - frontend-smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
      - cloudfront-update:
          requires: [frontend-smoke-test, backend-smoke-test]
          context:
            - aws
            - slack
          filters:
            branches:
              only: [master, ec2parse]
